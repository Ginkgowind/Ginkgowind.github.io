<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-02T17:11:38.018Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>InsideUE4——GamePlay框架总结</title>
    <link href="http://example.com/2022/09/02/InsideUE4%E2%80%94%E2%80%94GamePlay%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/09/02/InsideUE4%E2%80%94%E2%80%94GamePlay%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93/</id>
    <published>2022-09-02T15:24:34.000Z</published>
    <updated>2022-09-02T17:11:38.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h1><blockquote><p>为了面试口述，内容有省略，后续会完善。<br>笔者也表示Damage确实不是AActor应该管的事情。</p></blockquote><p>首先是UObject，提供了反射、GC、序列化等等属性，因为提供了很强大的这些基本属性，UObject基本是UE中一切类的起源。</p><p>Actor就是继承于UObject，添加了网络复制、Tick等等。Actor在UE中既包含具象化的实体，也包含一些看不到的信息、状态、规则，比如AInfo系列（GameMode、GameState这些）。所以Actor并不是自带Transform的，而是将Transform封装到了SceneComponent当做RootComponent，对外暴露出GetActorLocation这些。至于为什么要将Info继承自Actor而不是另起一套，我觉得可能是需要Tick、网络复制等等，但是Component、Damage对于Info来说又好像确实是冗余的，这里还不是很明白。</p><p>然后是Component，这其中也是“组合优于继承”的一种理念吧，如果什么都靠继承，那类的数量必然会相当爆炸。所以UE中的Actor就是靠各种Component组合而成。而Component也往下分为了两类，一类是有变换的SceneComponent（比如StaticMeshComponent），另一类是直接继承自ActorComponent的（比如UMovementComponent）。UE在SceneComponent这一级才提供了组件嵌套的能力，这个觉得也是合理的，毕竟组件嵌套最主要还是为了Transform的跟随。给移动组件添加嵌套能力也没啥作用，还容易让使用者产生困惑。</p><p>那对于游戏中大量Acotr的组织，UE是采用了多个Level组成World，每个Level管理自己内部的Acotr，这其实就是将游戏世界给细化了。同时每个Level也有自己的关卡蓝图，可以设置场景的静态属性比如重力等等。这种模式还有些别的好处，一是World管理着Level的动态加载与释放，可以节省性能；二是多个Level可以并行地编辑等等。</p><p>一个World可以管理多个Level，而World也不止一个，在UE中编辑器本身、预览窗口、运行后的游戏都是World，有点“平行世界”的意思，其中一个World对应一个WorldContext。World放在WorldContext来管理的，而WorldContext又是放在GameInstance来管理的。</p><p>然后是Pawn，Pawn继承自Actor，一些特点包括可被Controller控制、有移动组件输入的接口，默认是开启了网络复制的。从Pawn开始，就是一般游戏中玩家所直接控制的了。角色也不用多说，主要是对Pawn进行了扩展，包括骨架网格体、胶囊体组件、角色移动组件等等</p><p>Controller是单独抽离出来用来控制Pawn的一个类，且能够切换所控制的Pawn，PlayerState是可以存放一些玩家的数据。这三者是平级的并且一对一对一的关系，跟UE的网络关系很密切。</p><p>Controller又分为PlayerController和AIController。其中PlayerController直接跟玩家关联、并能够接收玩家设备的输入、提供摄像机管理等等。AIController就是提供了一些AI组件，运行行为树功能等等。</p><p>&amp;emsp;Controller是单独抽离出来用来控制Pawn的一个类，且能够切换所控制的Pawn，PlayerState是可以存放一些玩家的数据。这三者是平级的并且一对一对一的关系，跟UE的网络关系很密切。</p><p>&amp;emsp;Controller又分为PlayerController和AIController。其中PlayerController直接跟玩家关联、并能够接收玩家设备的输入、提供摄像机管理等等。AIController就是提供了一些AI组件，运行行为树功能等等。</p><p>然后是GameMode，GameMode主要是负责一些初始类的登记（比如默认的Pawn、PlayerController等等），以及负责游戏整体的逻辑，制定规则与玩法什么的。但是在网络游戏中，GameMode是只存在于服务端，客户端是不存在的，那为了一些数据的复制，就衍生出了GameState。这样也实现了一个游戏整体上逻辑与数据的解耦分离。此外，对于玩家控制器，客户端是只持有本地的那一个，服务端则是拥有所有的。</p><p>还有一个Player类，这个类也很重要，但是其功能基本都在幕后实现了，一般业务里也接触不到。而他派生出的LocalPlayer类是对应到了咱们玩游戏时的视口。</p><p>GameInstance在一次游戏中是唯一的，负责了引擎初始化、玩家创建、网络等等，一些全局性的配置或者比较独立的业务比如UI也可以放在这里。</p><p>UE也提供了GamePlayStatics这样一个静态类，来方便我们调用一些游戏内的函数（GetActorOfClass、Spawn等等）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;个人总结&quot;&gt;&lt;a href=&quot;#个人总结&quot; class=&quot;headerlink&quot; title=&quot;个人总结&quot;&gt;&lt;/a&gt;个人总结&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为了面试口述，内容有省略，后续会完善。&lt;br&gt;笔者也表示Damage确实不是AActor应该管的事</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/09/01/hello-world/"/>
    <id>http://example.com/2022/09/01/hello-world/</id>
    <published>2022-09-01T15:10:31.126Z</published>
    <updated>2022-09-01T15:10:31.126Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
